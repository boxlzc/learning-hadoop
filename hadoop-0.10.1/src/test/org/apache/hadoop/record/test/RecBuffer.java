// File generated by hadoop record compiler. Do not edit.
package org.apache.hadoop.record.test;

import java.io.IOException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.io.WritableComparator;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.io.WritableUtils;
import org.apache.hadoop.io.Text;

public class RecBuffer implements org.apache.hadoop.record.Record, WritableComparable {
  private static final Log LOG= LogFactory.getLog("org.apache.hadoop.record.test.RecBuffer");
  private java.io.ByteArrayOutputStream mData;
  private java.util.BitSet bs_;
  public RecBuffer() {
    bs_ = new java.util.BitSet(2);
    bs_.set(1);
  }
  public RecBuffer(
        java.io.ByteArrayOutputStream m0) {
    bs_ = new java.util.BitSet(2);
    bs_.set(1);
    mData=m0; bs_.set(0);
  }
  public java.io.ByteArrayOutputStream getData() {
    return mData;
  }
  public void setData(java.io.ByteArrayOutputStream m_) {
    mData=m_; bs_.set(0);
  }
  public void serialize(org.apache.hadoop.record.OutputArchive a_, String tag) throws java.io.IOException {
    if (!validate()) throw new java.io.IOException("All fields not set:");
    a_.startRecord(this,tag);
    a_.writeBuffer(mData,"Data");
    bs_.clear(0);
    a_.endRecord(this,tag);
  }
  public void deserialize(org.apache.hadoop.record.InputArchive a_, String tag) throws java.io.IOException {
    a_.startRecord(tag);
    mData=a_.readBuffer("Data");
    bs_.set(0);
    a_.endRecord(tag);
}
  public String toString() {
    try {
      java.io.ByteArrayOutputStream s =
        new java.io.ByteArrayOutputStream();
      org.apache.hadoop.record.CsvOutputArchive a_ = 
        new org.apache.hadoop.record.CsvOutputArchive(s);
      a_.startRecord(this,"");
    a_.writeBuffer(mData,"Data");
      a_.endRecord(this,"");
      return new String(s.toByteArray(), "UTF-8");
    } catch (Throwable ex) {
      ex.printStackTrace();
    }
    return "ERROR";
  }
  public void write(java.io.DataOutput out) throws java.io.IOException {
    org.apache.hadoop.record.BinaryOutputArchive archive = new org.apache.hadoop.record.BinaryOutputArchive(out);
    serialize(archive, "");
  }
  public void readFields(java.io.DataInput in) throws java.io.IOException {
    org.apache.hadoop.record.BinaryInputArchive archive = new org.apache.hadoop.record.BinaryInputArchive(in);
    deserialize(archive, "");
  }
  public boolean validate() {
    if (bs_.cardinality() != bs_.length()) return false;
    return true;
}
  public int compareTo (Object peer_) throws ClassCastException {
    if (!(peer_ instanceof RecBuffer)) {
      throw new ClassCastException("Comparing different types of records.");
    }
    RecBuffer peer = (RecBuffer) peer_;
    int ret = 0;
    {
      byte[] my = mData.toByteArray();
      byte[] ur = peer.mData.toByteArray();
      ret = WritableComparator.compareBytes(my,0,my.length,ur,0,ur.length);
    }
    if (ret != 0) return ret;
     return ret;
  }
  public boolean equals(Object peer_) {
    if (!(peer_ instanceof RecBuffer)) {
      return false;
    }
    if (peer_ == this) {
      return true;
    }
    RecBuffer peer = (RecBuffer) peer_;
    boolean ret = false;
    ret = org.apache.hadoop.record.Utils.bufEquals(mData,peer.mData);
    if (!ret) return ret;
     return ret;
  }
  public int hashCode() {
    int result = 17;
    int ret;
    ret = mData.toString().hashCode();
    result = 37*result + ret;
    return result;
  }
  public static String signature() {
    return "LRecBuffer(B)";
  }
  public static class Comparator extends WritableComparator {
    public Comparator() {
      super(RecBuffer.class);
    }
    static public int slurpRaw(byte[] b, int s, int l) {
      try {
        int os = s;
        {
           int i = WritableComparator.readVInt(b, s);
           int z = WritableUtils.getVIntSize(i);
           s += z+i; l -= (z+i);
        }
        return (os - s);
      } catch(IOException e) {
        LOG.warn(e);
        throw new RuntimeException(e);
      }
    }
    static public int compareRaw(byte[] b1, int s1, int l1,
                       byte[] b2, int s2, int l2) {
      try {
        int os1 = s1;
        {
           int i1 = WritableComparator.readVInt(b1, s1);
           int i2 = WritableComparator.readVInt(b2, s2);
           int z1 = WritableUtils.getVIntSize(i1);
           int z2 = WritableUtils.getVIntSize(i2);
           s1+=z1; s2+=z2; l1-=z1; l2-=z2;
           int r1 = WritableComparator.compareBytes(b1,s1,l1,b2,s2,l2);
           if (r1 != 0) { return (r1<0)?-1:0; }
           s1+=i1; s2+=i2; l1-=i1; l1-=i2;
        }
        return (os1 - s1);
      } catch(IOException e) {
        LOG.warn(e);
        throw new RuntimeException(e);
      }
    }
    public int compare(byte[] b1, int s1, int l1,
                       byte[] b2, int s2, int l2) {
      int ret = compareRaw(b1,s1,l1,b2,s2,l2);
      return (ret == -1)? -1 : ((ret==0)? 1 : 0);    }
  }

  static {
    WritableComparator.define(RecBuffer.class, new Comparator());
  }
}
